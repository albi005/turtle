// <auto-generated />
using System;
using Hivemind.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hivemind.Migrations
{
    [DbContext(typeof(Db))]
    partial class DbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Hivemind.Data.DbBlock", b =>
                {
                    b.Property<uint>("WorldId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Dimension")
                        .HasColumnType("INTEGER");

                    b.Property<long>("X")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Y")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Z")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("WorldId", "Dimension", "X", "Y", "Z");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Hivemind.Data.DbWorld", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Worlds");
                });

            modelBuilder.Entity("Hivemind.Data.DbBlock", b =>
                {
                    b.HasOne("Hivemind.Data.DbWorld", "World")
                        .WithMany()
                        .HasForeignKey("WorldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("World");
                });
#pragma warning restore 612, 618
        }
    }
}
