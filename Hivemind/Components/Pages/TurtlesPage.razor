@page "/turtles"
@inject TurtleService TurtleService
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>Hivemind</PageTitle>

<h1>Hivemind</h1>

@foreach (var world in TurtleService.Worlds.Values)
{
    <h2>@world.Name</h2>
    @foreach (var turtle in world.Turtles.Values)
    {
        <p>
            <b>
                Turtle @turtle.Id @(" ")
            </b>
            @if (turtle.Position.HasValue)
            {
                var pos = turtle.Position.Value;
                <span>@pos.X, @pos.Y, @pos.Z</span>
            }

            @(" ") @turtle.Dimension?.Name
            @(" ") <b>@turtle.FuelLevel</b>/@turtle.FuelLimit
        </p>
        <p>
            <MudButtonGroup Variant="Variant.Filled" Class="ma-2" OverrideStyles="false">
                @foreach (string job in _jobs)
                {
                    <MudButton
                        Disabled="@(turtle.Connection == null)"
                        Variant="Variant.Filled"
                        Color="@GetButtonColor(job, turtle)"
                        OnClick="@(() => turtle.Connection?.SendAsync(job)!)">
                        @job
                    </MudButton>
                }
            </MudButtonGroup>

        </p>
    }
}

@code {

    private static string[] _jobs = ["north", "east", "south", "west", "up", "down", "mine", "reboot", "lava"];

    protected override void OnInitialized()
    {
        base.OnInitialized();
        TurtleService.OnChanged += Update;
    }

    private void Update() => InvokeAsync(StateHasChanged);

    private Color GetButtonColor(string job, Turtle turtle)
    {
        return job == turtle.CurrentJob
            ? Color.Success
            : job == turtle.NextJob
                ? Color.Primary
                : Color.Dark;
    }

    void IDisposable.Dispose() => TurtleService.OnChanged -= Update;

}